// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Questionnaire.Data.DatabaseContext;

namespace Questionnaire.Data.Migrations
{
    [DbContext(typeof(QuestionnaireContext))]
    [Migration("20210314201410_initialSchema")]
    partial class initialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Questionnaire.Core.DomainObjects.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Stamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Questionnaire.Core.DomainObjects.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuestionStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Stamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionStatement = "Which is the national flower of Poland?",
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 430, DateTimeKind.Local).AddTicks(1360),
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            QuestionStatement = "Which city is now the capital of Poland?",
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 431, DateTimeKind.Local).AddTicks(5252),
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            QuestionStatement = "Which countries border Poland?",
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 431, DateTimeKind.Local).AddTicks(5312),
                            isActive = true
                        });
                });

            modelBuilder.Entity("Questionnaire.Core.DomainObjects.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OptionStatement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Stamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OptionStatement = "Lily",
                            QuestionId = 1,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(3916),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 2,
                            OptionStatement = "Corn Poppy",
                            QuestionId = 1,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(5374),
                            isCorrect = true
                        },
                        new
                        {
                            Id = 3,
                            OptionStatement = "Lavender",
                            QuestionId = 1,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6135),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 4,
                            OptionStatement = "Flor De Maga",
                            QuestionId = 1,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6146),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 5,
                            OptionStatement = "Astana",
                            QuestionId = 2,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6149),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 6,
                            OptionStatement = "Warsaw",
                            QuestionId = 2,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6161),
                            isCorrect = true
                        },
                        new
                        {
                            Id = 7,
                            OptionStatement = "Krakow",
                            QuestionId = 2,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6199),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 8,
                            OptionStatement = "Bucharest",
                            QuestionId = 2,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6202),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 9,
                            OptionStatement = "Germany",
                            QuestionId = 3,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6205),
                            isCorrect = true
                        },
                        new
                        {
                            Id = 10,
                            OptionStatement = "Ukraine",
                            QuestionId = 3,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6301),
                            isCorrect = true
                        },
                        new
                        {
                            Id = 11,
                            OptionStatement = "Romania",
                            QuestionId = 3,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6306),
                            isCorrect = false
                        },
                        new
                        {
                            Id = 12,
                            OptionStatement = "Italy ",
                            QuestionId = 3,
                            Stamp = new DateTime(2021, 3, 15, 1, 14, 9, 439, DateTimeKind.Local).AddTicks(6308),
                            isCorrect = false
                        });
                });

            modelBuilder.Entity("Questionnaire.Core.DomainObjects.QuestionOption", b =>
                {
                    b.HasOne("Questionnaire.Core.DomainObjects.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Questionnaire.Core.DomainObjects.Question", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
